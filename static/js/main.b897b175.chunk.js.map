{"version":3,"sources":["components/Header.jsx","context/AppReducer.jsx","context/GlobalState.jsx","components/Balance.jsx","components/IncomeExpenses.jsx","components/Transaction.jsx","components/TransactionList.jsx","components/AddTransaction.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b897b175.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t <h2>Expense Tracker </h2>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Header","export default (state, action) =>{\r\n\tswitch(action.type){\r\n\t\tcase 'DELETE_TRANSACTION':\r\n\t\t\treturn{\r\n\t\t\t \t...state,\r\n\t\t\t \ttransactions: state.transactions.filter(transaction => transaction.id !== action.payload)\r\n\t\t\t}\r\n\t\t\tcase'ADD_TRANSACTION':\r\n\t\t\treturn{\r\n\t\t\t\t...state,\r\n\t\t\t\ttransactions: [action.payload, ...state.transactions]\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React, {createContext, useReducer} from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\n//initial state\r\nconst initialState = {\r\n\ttransactions: []\r\n}\r\n\r\n//create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n//provider component\r\nexport const GlobalProvider = ({children}) =>{\r\n\tconst [state, dispatch] =useReducer(AppReducer, initialState)\r\n\t//Actions\r\n\tfunction deleteTransaction(id){\r\n\t\tdispatch({\r\n\t\t\ttype: 'DELETE_TRANSACTION',\r\n\t\t\tpayload: id\r\n\t\t});\r\n\t}\r\n\tfunction addTransaction(transaction){\r\n\t\tdispatch({\r\n\t\t\ttype: 'ADD_TRANSACTIONgi',\r\n\t\t\tpayload: transaction\r\n\t\t});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<GlobalContext.Provider value ={{\r\n\t\ttransactions: state.transactions,\r\n\t\tdeleteTransaction,\r\n\t\taddTransaction\r\n\r\n\t}}>\r\n\t\t{children}\r\n\t\t</GlobalContext.Provider>)\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\nconst Balance = () =>{\r\n\tconst {transactions} = useContext(GlobalContext);\r\n\r\n\tconst amounts = transactions.map(transaction => transaction.amount);\r\n\tconst total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4>Your Balance</h4>\r\n\t\t\t<h1> ${total}</h1>\r\n\t\t</div>\r\n\r\n\t\t)\r\n}\r\nexport default Balance","import React, {useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\n const IncomeExpenses = () =>{\r\n \tconst {transactions} = useContext(GlobalContext);\r\n \tconst amounts = transactions.map(transaction => transaction.amount);\r\n\tconst income = amounts\r\n\t    .filter(item => item > 0)\r\n\t    .reduce((acc, item) => (acc += item), 0)\r\n\t    .toFixed(2);\r\n\r\n\t const expense = (\r\n\t\t  amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) * -1).toFixed(2);\r\n\r\n\treturn(\r\n\t\t <div className=\"inc-exp-container\">\r\n\t        <div>\r\n\t          <h4>Income</h4>\r\n\t          <p id=\"money-plus\" className=\"money plus\">{income}</p>\r\n\t        </div>\r\n\t        <div>\r\n\t          <h4>Expense</h4>\r\n\t          <p id=\"money-minus\" className=\"money minus\">{expense}</p>\r\n\t        </div>\r\n         </div>\r\n\t\t)\r\n}\r\nexport default IncomeExpenses","import React , {useContext}from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\nexport const Transaction = ({transaction}) =>{\r\n\tconst {deleteTransaction} = useContext(GlobalContext);\r\n\tconst sign = transaction.amount < 0 ? '-': '+';\r\n\treturn(\r\n\t\t<li className = {transaction.amount < 0 ? 'minus': 'plus'}>\r\n\t        \t{transaction.text}\r\n\t        \t <span>{sign} ${Math.abs(transaction.amount)}</span>\r\n\t        \t<button className=\"delete-btn\" onClick ={() =>deleteTransaction(transaction.id)}>x</button>\r\n\t     </li> \r\n\t\t)\r\n}","import React, {useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\nimport {Transaction} from './Transaction';\r\n\r\n const TransactionList = () =>{\r\n \tconst {transactions} = useContext(GlobalContext)\r\n \t\r\n\treturn(\r\n\t\t <div className=\"\">\r\n\t        <h3>History</h3>\r\n\t        <ul id =\"list\" className = \"list\">\r\n\t        \t{transactions.map(transaction => \r\n\t        \t\t(\r\n\t        \t\t\t<Transaction key = {transaction.id} transaction ={transaction} />\r\n\t        \t\t)\r\n\t        \t\t)}\t\r\n\t        </ul>  \r\n         </div>\r\n\t\t)\r\n}\r\nexport default TransactionList","import React, {useState, useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\nconst AddTransaction = () =>{\r\n\tconst [text, setText] =useState(\"\")\r\n\tconst [amount, setAmount] = useState(\"\")\r\n\tconst {addTransaction} = useContext(GlobalContext)\r\n\r\n\tconst onSubmit = e =>{\r\n\t\te.preventDefault()\r\n\t\tconst newTransaction = {\r\n\t\t\tid: Math.floor(Math.random() * 100000000),\r\n\t\t\ttext,\r\n\t\t\tamount: +amount\r\n\t\t}\r\n\t\taddTransaction(newTransaction)\r\n\t}\r\n\treturn(\r\n\t<div>\r\n\t <h3>Add new transaction</h3>\r\n      <form onSubmit = {onSubmit}>\r\n        <div className=\"htmlForm-control\">\r\n          <label htmlFor=\"text\">Text</label>\r\n          <input type=\"text\" id=\"text\" value={text} onChange ={e => setText(e.target.value)} placeholder=\"Enter text...\" />\r\n        </div>\r\n        <div className=\"htmlForm-control\">\r\n          <label htmlFor=\"amount\"\r\n            >Amount <br />\r\n            (negative - expense, positive - income)</label>\r\n          <input type=\"number\" id=\"amount\" value={amount} onChange = {e => setAmount(e.target.value)} placeholder=\"Enter amount...\" />\r\n        </div>\r\n        <button className=\"btn\">Add transaction</button>\r\n      </form>\r\n    </div>\r\n)}\r\nexport default AddTransaction","import React from 'react';\nimport Header from './components/Header'\nimport Balance from './components/Balance'\nimport IncomeExpenses from './components/IncomeExpenses'\nimport TransactionList from './components/TransactionList'\nimport AddTransaction from './components/AddTransaction'\nimport './App.css';\n\nimport {GlobalProvider} from './context/GlobalState'\n\nfunction App() {\n  return (\n    <GlobalProvider >\n        <Header />\n      <div className = \"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n       </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}